(set-logic ALL)
(set-option :dt-nested-rec true)


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-sort T@ByteArray 0)
(declare-datatypes ((T@Transaction 0)) (((Transaction (|gas_unit_price#Transaction| Int) (|max_gas_units#Transaction| Int) (|public_key#Transaction| T@ByteArray) (|sender#Transaction| Int) (|sequence_number#Transaction| Int) (|gas_remaining#Transaction| Int) ) ) ))
(declare-sort T@String 0)
(declare-datatypes ((T@Value 0)(T@ValueArray 0)) (((Boolean (|b#Boolean| Bool) ) (Integer (|i#Integer| Int) ) (Address (|a#Address| Int) ) (ByteArray (|b#ByteArray| T@ByteArray) ) (Str (|a#Str| T@String) ) (Vector (|v#Vector| T@ValueArray) ) ) ((ValueArray (|v#ValueArray| (Array Int T@Value)) (|l#ValueArray| Int) ) ) ))
(declare-sort T@TypeName 0)
(declare-datatypes ((T@TypeValue 0)(T@TypeValueArray 0)) (((BooleanType ) (IntegerType ) (AddressType ) (ByteArrayType ) (StrType ) (VectorType (|t#VectorType| T@TypeValue) ) (StructType (|name#StructType| T@TypeName) (|ts#StructType| T@TypeValueArray) ) ) ((TypeValueArray (|v#TypeValueArray| (Array Int T@TypeValue)) (|l#TypeValueArray| Int) ) ) ))
(declare-datatypes ((T@Location 0)) (((Global (|t#Global| T@TypeValue) (|a#Global| Int) ) (Local (|i#Local| Int) ) ) ))
(declare-datatypes ((T@Memory 0)) (((Memory (|domain#Memory| (Array T@Location Bool)) (|contents#Memory| (Array T@Location T@Value)) ) ) ))
(declare-datatypes ((T@Path 0)) (((Path (|p#Path| (Array Int Int)) (|size#Path| Int) ) ) ))
(declare-datatypes ((T@Reference 0)) (((Reference (|l#Reference| T@Location) (|p#Reference| T@Path) ) ) ))
(declare-fun LibraCoin_T () T@TypeName)
(declare-fun LibraCoin_MintCapability () T@TypeName)
(declare-fun LibraCoin_MarketCap () T@TypeName)
(declare-fun EmptyPath () T@Path)
(declare-fun path_index_at (T@Path Int) Int)
(declare-fun EmptyTypeValueArray () T@TypeValueArray)
(declare-fun DefaultTypeValue () T@TypeValue)
(declare-fun ExtendTypeValueArray (T@TypeValueArray T@TypeValue) T@TypeValueArray)
(declare-fun MAX_U8 () Int)
(declare-fun MAX_U64 () Int)
(declare-fun MAX_U128 () Int)
(declare-fun max_u64 () T@Value)
(declare-fun EmptyValueArray () T@ValueArray)
(declare-fun DefaultValue () T@Value)
(declare-fun AddValueArray (T@ValueArray T@Value) T@ValueArray)
(declare-fun RemoveValueArray (T@ValueArray) T@ValueArray)
(declare-fun ConcatValueArray (T@ValueArray T@ValueArray) T@ValueArray)
(declare-fun |lambda#0| (Int (Array Int T@Value) (Array Int T@Value) Int) (Array Int T@Value))
(declare-fun ReverseValueArray (T@ValueArray) T@ValueArray)
(declare-fun |lambda#1| (Int Int (Array Int T@Value) Int Int T@Value) (Array Int T@Value))
(declare-fun ExtendValueArray (T@ValueArray T@Value) T@ValueArray)
(declare-fun UpdateValueArray (T@ValueArray Int T@Value) T@ValueArray)
(declare-fun SwapValueArray (T@ValueArray Int Int) T@ValueArray)
(declare-fun IsEmpty (T@ValueArray) Bool)
(declare-fun StratificationDepth () Int)
(declare-fun IsEqual4 (T@Value T@Value) Bool)
(declare-fun IsEqual3 (T@Value T@Value) Bool)
(declare-fun vlen (T@Value) Int)
(declare-fun vmap (T@Value) (Array Int T@Value))
(declare-fun IsEqual2 (T@Value T@Value) Bool)
(declare-fun IsEqual1 (T@Value T@Value) Bool)
(declare-fun IsEqual (T@Value T@Value) Bool)
(declare-fun ReadValue4 (T@Path T@Value) T@Value)
(declare-fun ReadValue3 (T@Path T@Value) T@Value)
(declare-fun ReadValue2 (T@Path T@Value) T@Value)
(declare-fun ReadValue1 (T@Path T@Value) T@Value)
(declare-fun ReadValue0 (T@Path T@Value) T@Value)
(declare-fun ReadValue (T@Path T@Value) T@Value)
(declare-fun UpdateValue4 (T@Path T@Value T@Value) T@Value)
(declare-fun UpdateValue3 (T@Path T@Value T@Value) T@Value)
(declare-fun update_vector (T@Value Int T@Value) T@Value)
(declare-fun UpdateValue2 (T@Path T@Value T@Value) T@Value)
(declare-fun UpdateValue1 (T@Path T@Value T@Value) T@Value)
(declare-fun UpdateValue0 (T@Path T@Value T@Value) T@Value)
(declare-fun UpdateValue (T@Path T@Value T@Value) T@Value)
(declare-fun mk_vector () T@Value)
(declare-fun push_back_vector (T@Value T@Value) T@Value)
(declare-fun pop_back_vector (T@Value) T@Value)
(declare-fun append_vector (T@Value T@Value) T@Value)
(declare-fun reverse_vector (T@Value) T@Value)
(declare-fun swap_vector (T@Value Int Int) T@Value)
(declare-fun EmptyMemory () T@Memory)
(declare-fun GetLocal (T@Memory Int) T@Value)
(declare-fun UpdateLocal (T@Memory Int T@Value) T@Memory)
(declare-fun ExistsResourceRaw (T@Memory T@TypeValue Int) Bool)
(declare-fun ExistsResource (T@Memory T@TypeValue Int) T@Value)
(declare-fun GetResourceReference (T@TypeValue Int) T@Reference)
(declare-fun GetLocalReference (Int Int) T@Reference)
(declare-fun SelectFieldFromRef (T@Reference Int) T@Reference)
(declare-fun SelectField (T@Value Int) T@Value)
(declare-fun Dereference (T@Memory T@Reference) T@Value)
(declare-fun ExistsTxnSenderAccount (T@Memory T@Transaction) Bool)
(declare-fun LibraAccount_T_type_value () T@TypeValue)
(declare-fun TxnSenderAddress (T@Transaction) Int)
(declare-fun LibraCoin_T_value () Int)
(declare-fun LibraCoin_T_type_value () T@TypeValue)
(declare-fun LibraCoin_MintCapability__dummy () Int)
(declare-fun LibraCoin_MintCapability_type_value () T@TypeValue)
(declare-fun LibraCoin_MarketCap_total_value () Int)
(declare-fun LibraCoin_MarketCap_type_value () T@TypeValue)
(assert (distinct LibraCoin_T LibraCoin_MintCapability LibraCoin_MarketCap)
)
(assert (= (|size#Path| EmptyPath) 0))
(assert (forall ((p T@Path) (i Int) ) (! (= (path_index_at p i) (select (|p#Path| p) i))
 :qid |libracoi.18:36|
 :skolemid |0|
 :pattern ( (path_index_at p i))
)))
(assert (= (|l#TypeValueArray| EmptyTypeValueArray) 0))
(assert (= (|v#TypeValueArray| EmptyTypeValueArray) ((as const (Array Int T@TypeValue)) DefaultTypeValue)))
(assert (forall ((ta T@TypeValueArray) (tv T@TypeValue) ) (! (= (ExtendTypeValueArray ta tv) (TypeValueArray (store (|v#TypeValueArray| ta) (|l#TypeValueArray| ta) tv) (+ (|l#TypeValueArray| ta) 1)))
 :qid |libracoi.45:43|
 :skolemid |1|
 :pattern ( (ExtendTypeValueArray ta tv))
)))
(assert (= MAX_U8 255))
(assert (= MAX_U64 9223372036854775807))
(assert (= MAX_U128 340282366920938463463374607431768211456))
(assert (= max_u64 (Integer 9223372036854775807)))
(assert (= (|l#ValueArray| EmptyValueArray) 0))
(assert (= (|v#ValueArray| EmptyValueArray) ((as const (Array Int T@Value)) DefaultValue)))
(assert (forall ((a T@ValueArray) (v T@Value) ) (! (= (AddValueArray a v) (ValueArray (store (|v#ValueArray| a) (|l#ValueArray| a) v) (+ (|l#ValueArray| a) 1)))
 :qid |libracoi.104:36|
 :skolemid |2|
 :pattern ( (AddValueArray a v))
)))
(assert (forall ((a@@0 T@ValueArray) ) (! (= (RemoveValueArray a@@0) (ValueArray (store (|v#ValueArray| a@@0) (|l#ValueArray| a@@0) DefaultValue) (- (|l#ValueArray| a@@0) 1)))
 :qid |libracoi.108:39|
 :skolemid |3|
 :pattern ( (RemoveValueArray a@@0))
)))
(assert (forall ((a1 T@ValueArray) (a2 T@ValueArray) ) (! (= (ConcatValueArray a1 a2) (ValueArray (|lambda#0| (|l#ValueArray| a1) (|v#ValueArray| a1) (|v#ValueArray| a2) (|l#ValueArray| a1)) (+ (|l#ValueArray| a1) (|l#ValueArray| a2))))
 :qid |libracoi.111:39|
 :skolemid |4|
 :pattern ( (ConcatValueArray a1 a2))
)))
(assert (forall ((a@@1 T@ValueArray) ) (! (= (ReverseValueArray a@@1) (ValueArray (|lambda#1| 0 (|l#ValueArray| a@@1) (|v#ValueArray| a@@1) (|l#ValueArray| a@@1) 1 DefaultValue) (|l#ValueArray| a@@1)))
 :qid |libracoi.116:40|
 :skolemid |5|
 :pattern ( (ReverseValueArray a@@1))
)))
(assert (forall ((a@@2 T@ValueArray) (elem T@Value) ) (! (= (ExtendValueArray a@@2 elem) (ValueArray (store (|v#ValueArray| a@@2) (|l#ValueArray| a@@2) elem) (+ (|l#ValueArray| a@@2) 1)))
 :qid |libracoi.122:39|
 :skolemid |6|
 :pattern ( (ExtendValueArray a@@2 elem))
)))
(assert (forall ((a@@3 T@ValueArray) (i@@0 Int) (elem@@0 T@Value) ) (! (= (UpdateValueArray a@@3 i@@0 elem@@0) (ValueArray (store (|v#ValueArray| a@@3) i@@0 elem@@0) (|l#ValueArray| a@@3)))
 :qid |libracoi.125:39|
 :skolemid |7|
 :pattern ( (UpdateValueArray a@@3 i@@0 elem@@0))
)))
(assert (forall ((a@@4 T@ValueArray) (i@@1 Int) (j Int) ) (! (= (SwapValueArray a@@4 i@@1 j) (ValueArray (store (store (|v#ValueArray| a@@4) i@@1 (select (|v#ValueArray| a@@4) j)) j (select (|v#ValueArray| a@@4) i@@1)) (|l#ValueArray| a@@4)))
 :qid |libracoi.128:37|
 :skolemid |8|
 :pattern ( (SwapValueArray a@@4 i@@1 j))
)))
(assert (forall ((a@@5 T@ValueArray) ) (!  (and (=> (IsEmpty a@@5) (= (|l#ValueArray| a@@5) 0)) (=> (= (|l#ValueArray| a@@5) 0) (IsEmpty a@@5)))
 :qid |libracoi.131:30|
 :skolemid |9|
 :pattern ( (IsEmpty a@@5))
)))
(assert (= StratificationDepth 4))
(assert (forall ((v1 T@Value) (v2 T@Value) ) (!  (and (=> (IsEqual4 v1 v2) (= v1 v2)) (=> (= v1 v2) (IsEqual4 v1 v2)))
 :qid |libracoi.146:31|
 :skolemid |10|
 :pattern ( (IsEqual4 v1 v2))
)))
(assert (forall ((v1@@0 T@Value) (v2@@0 T@Value) ) (!  (and (=> (IsEqual3 v1@@0 v2@@0) (or (= v1@@0 v2@@0) (and (and (and (is-Vector v1@@0) (is-Vector v2@@0)) (= (vlen v1@@0) (vlen v2@@0))) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (vlen v1@@0))) (IsEqual4 (select (vmap v1@@0) i@@2) (select (vmap v2@@0) i@@2)))
 :qid |libracoi.154:14|
 :skolemid |11|
))))) (=> (or (= v1@@0 v2@@0) (and (and (and (is-Vector v1@@0) (is-Vector v2@@0)) (= (vlen v1@@0) (vlen v2@@0))) (forall ((i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (vlen v1@@0))) (IsEqual4 (select (vmap v1@@0) i@@3) (select (vmap v2@@0) i@@3)))
 :qid |libracoi.154:14|
 :skolemid |11|
)))) (IsEqual3 v1@@0 v2@@0)))
 :qid |libracoi.149:31|
 :skolemid |12|
 :pattern ( (IsEqual3 v1@@0 v2@@0))
)))
(assert (forall ((v1@@1 T@Value) (v2@@1 T@Value) ) (!  (and (=> (IsEqual2 v1@@1 v2@@1) (or (= v1@@1 v2@@1) (and (and (and (is-Vector v1@@1) (is-Vector v2@@1)) (= (vlen v1@@1) (vlen v2@@1))) (forall ((i@@4 Int) ) (!  (=> (and (<= 0 i@@4) (< i@@4 (vlen v1@@1))) (IsEqual3 (select (vmap v1@@1) i@@4) (select (vmap v2@@1) i@@4)))
 :qid |libracoi.161:14|
 :skolemid |13|
))))) (=> (or (= v1@@1 v2@@1) (and (and (and (is-Vector v1@@1) (is-Vector v2@@1)) (= (vlen v1@@1) (vlen v2@@1))) (forall ((i@@5 Int) ) (!  (=> (and (<= 0 i@@5) (< i@@5 (vlen v1@@1))) (IsEqual3 (select (vmap v1@@1) i@@5) (select (vmap v2@@1) i@@5)))
 :qid |libracoi.161:14|
 :skolemid |13|
)))) (IsEqual2 v1@@1 v2@@1)))
 :qid |libracoi.156:31|
 :skolemid |14|
 :pattern ( (IsEqual2 v1@@1 v2@@1))
)))
(assert (forall ((v1@@2 T@Value) (v2@@2 T@Value) ) (!  (and (=> (IsEqual1 v1@@2 v2@@2) (or (= v1@@2 v2@@2) (and (and (and (is-Vector v1@@2) (is-Vector v2@@2)) (= (vlen v1@@2) (vlen v2@@2))) (forall ((i@@6 Int) ) (!  (=> (and (<= 0 i@@6) (< i@@6 (vlen v1@@2))) (IsEqual2 (select (vmap v1@@2) i@@6) (select (vmap v2@@2) i@@6)))
 :qid |libracoi.168:14|
 :skolemid |15|
))))) (=> (or (= v1@@2 v2@@2) (and (and (and (is-Vector v1@@2) (is-Vector v2@@2)) (= (vlen v1@@2) (vlen v2@@2))) (forall ((i@@7 Int) ) (!  (=> (and (<= 0 i@@7) (< i@@7 (vlen v1@@2))) (IsEqual2 (select (vmap v1@@2) i@@7) (select (vmap v2@@2) i@@7)))
 :qid |libracoi.168:14|
 :skolemid |15|
)))) (IsEqual1 v1@@2 v2@@2)))
 :qid |libracoi.163:31|
 :skolemid |16|
 :pattern ( (IsEqual1 v1@@2 v2@@2))
)))
(assert (forall ((v1@@3 T@Value) (v2@@3 T@Value) ) (!  (and (=> (IsEqual v1@@3 v2@@3) (IsEqual1 v1@@3 v2@@3)) (=> (IsEqual1 v1@@3 v2@@3) (IsEqual v1@@3 v2@@3)))
 :qid |libracoi.170:30|
 :skolemid |17|
 :pattern ( (IsEqual v1@@3 v2@@3))
)))
(assert (forall ((p@@0 T@Path) (v@@0 T@Value) ) (! (= (ReadValue4 p@@0 v@@0) v@@0)
 :qid |libracoi.174:33|
 :skolemid |18|
 :pattern ( (ReadValue4 p@@0 v@@0))
)))
(assert (forall ((p@@1 T@Path) (v@@1 T@Value) ) (! (= (ReadValue3 p@@1 v@@1) (ite (= 3 (|size#Path| p@@1)) v@@1 (ReadValue4 p@@1 (select (vmap v@@1) (path_index_at p@@1 3)))))
 :qid |libracoi.177:33|
 :skolemid |19|
 :pattern ( (ReadValue3 p@@1 v@@1))
)))
(assert (forall ((p@@2 T@Path) (v@@2 T@Value) ) (! (= (ReadValue2 p@@2 v@@2) (ite (= 2 (|size#Path| p@@2)) v@@2 (ReadValue3 p@@2 (select (vmap v@@2) (path_index_at p@@2 2)))))
 :qid |libracoi.183:33|
 :skolemid |20|
 :pattern ( (ReadValue2 p@@2 v@@2))
)))
(assert (forall ((p@@3 T@Path) (v@@3 T@Value) ) (! (= (ReadValue1 p@@3 v@@3) (ite (= 1 (|size#Path| p@@3)) v@@3 (ReadValue2 p@@3 (select (vmap v@@3) (path_index_at p@@3 1)))))
 :qid |libracoi.189:33|
 :skolemid |21|
 :pattern ( (ReadValue1 p@@3 v@@3))
)))
(assert (forall ((p@@4 T@Path) (v@@4 T@Value) ) (! (= (ReadValue0 p@@4 v@@4) (ite (= 0 (|size#Path| p@@4)) v@@4 (ReadValue1 p@@4 (select (vmap v@@4) (path_index_at p@@4 0)))))
 :qid |libracoi.195:33|
 :skolemid |22|
 :pattern ( (ReadValue0 p@@4 v@@4))
)))
(assert (forall ((p@@5 T@Path) (v@@5 T@Value) ) (! (= (ReadValue p@@5 v@@5) (ReadValue0 p@@5 v@@5))
 :qid |libracoi.201:32|
 :skolemid |23|
 :pattern ( (ReadValue p@@5 v@@5))
)))
(assert (forall ((p@@6 T@Path) (v@@6 T@Value) (new_v T@Value) ) (! (= (UpdateValue4 p@@6 v@@6 new_v) new_v)
 :qid |libracoi.205:35|
 :skolemid |24|
 :pattern ( (UpdateValue4 p@@6 v@@6 new_v))
)))
(assert (forall ((p@@7 T@Path) (v@@7 T@Value) (new_v@@0 T@Value) ) (! (= (UpdateValue3 p@@7 v@@7 new_v@@0) (ite (= 3 (|size#Path| p@@7)) new_v@@0 (update_vector v@@7 (path_index_at p@@7 3) (UpdateValue4 p@@7 (select (vmap v@@7) (path_index_at p@@7 3)) new_v@@0))))
 :qid |libracoi.208:35|
 :skolemid |25|
 :pattern ( (UpdateValue3 p@@7 v@@7 new_v@@0))
)))
(assert (forall ((p@@8 T@Path) (v@@8 T@Value) (new_v@@1 T@Value) ) (! (= (UpdateValue2 p@@8 v@@8 new_v@@1) (ite (= 2 (|size#Path| p@@8)) new_v@@1 (update_vector v@@8 (path_index_at p@@8 2) (UpdateValue3 p@@8 (select (vmap v@@8) (path_index_at p@@8 2)) new_v@@1))))
 :qid |libracoi.214:35|
 :skolemid |26|
 :pattern ( (UpdateValue2 p@@8 v@@8 new_v@@1))
)))
(assert (forall ((p@@9 T@Path) (v@@9 T@Value) (new_v@@2 T@Value) ) (! (= (UpdateValue1 p@@9 v@@9 new_v@@2) (ite (= 1 (|size#Path| p@@9)) new_v@@2 (update_vector v@@9 (path_index_at p@@9 1) (UpdateValue2 p@@9 (select (vmap v@@9) (path_index_at p@@9 1)) new_v@@2))))
 :qid |libracoi.220:35|
 :skolemid |27|
 :pattern ( (UpdateValue1 p@@9 v@@9 new_v@@2))
)))
(assert (forall ((p@@10 T@Path) (v@@10 T@Value) (new_v@@3 T@Value) ) (! (= (UpdateValue0 p@@10 v@@10 new_v@@3) (ite (= 0 (|size#Path| p@@10)) new_v@@3 (update_vector v@@10 (path_index_at p@@10 0) (UpdateValue1 p@@10 (select (vmap v@@10) (path_index_at p@@10 0)) new_v@@3))))
 :qid |libracoi.226:35|
 :skolemid |28|
 :pattern ( (UpdateValue0 p@@10 v@@10 new_v@@3))
)))
(assert (forall ((p@@11 T@Path) (v@@11 T@Value) (new_v@@4 T@Value) ) (! (= (UpdateValue p@@11 v@@11 new_v@@4) (UpdateValue0 p@@11 v@@11 new_v@@4))
 :qid |libracoi.232:34|
 :skolemid |29|
 :pattern ( (UpdateValue p@@11 v@@11 new_v@@4))
)))
(assert (forall ((v@@12 T@Value) ) (! (= (vmap v@@12) (|v#ValueArray| (|v#Vector| v@@12)))
 :qid |libracoi.239:27|
 :skolemid |30|
 :pattern ( (vmap v@@12))
)))
(assert (forall ((v@@13 T@Value) ) (! (= (vlen v@@13) (|l#ValueArray| (|v#Vector| v@@13)))
 :qid |libracoi.242:27|
 :skolemid |31|
 :pattern ( (vlen v@@13))
)))
(assert (= mk_vector (Vector EmptyValueArray)))
(assert (forall ((v@@14 T@Value) (elem@@1 T@Value) ) (! (= (push_back_vector v@@14 elem@@1) (Vector (AddValueArray (|v#Vector| v@@14) elem@@1)))
 :qid |libracoi.248:39|
 :skolemid |32|
 :pattern ( (push_back_vector v@@14 elem@@1))
)))
(assert (forall ((v@@15 T@Value) ) (! (= (pop_back_vector v@@15) (Vector (RemoveValueArray (|v#Vector| v@@15))))
 :qid |libracoi.251:38|
 :skolemid |33|
 :pattern ( (pop_back_vector v@@15))
)))
(assert (forall ((v1@@4 T@Value) (v2@@4 T@Value) ) (! (= (append_vector v1@@4 v2@@4) (Vector (ConcatValueArray (|v#Vector| v1@@4) (|v#Vector| v2@@4))))
 :qid |libracoi.254:36|
 :skolemid |34|
 :pattern ( (append_vector v1@@4 v2@@4))
)))
(assert (forall ((v@@16 T@Value) ) (! (= (reverse_vector v@@16) (Vector (ReverseValueArray (|v#Vector| v@@16))))
 :qid |libracoi.257:37|
 :skolemid |35|
 :pattern ( (reverse_vector v@@16))
)))
(assert (forall ((v@@17 T@Value) (i@@8 Int) (elem@@2 T@Value) ) (! (= (update_vector v@@17 i@@8 elem@@2) (Vector (UpdateValueArray (|v#Vector| v@@17) i@@8 elem@@2)))
 :qid |libracoi.260:36|
 :skolemid |36|
 :pattern ( (update_vector v@@17 i@@8 elem@@2))
)))
(assert (forall ((v@@18 T@Value) (i@@9 Int) (j@@0 Int) ) (! (= (swap_vector v@@18 i@@9 j@@0) (Vector (SwapValueArray (|v#Vector| v@@18) i@@9 j@@0)))
 :qid |libracoi.263:34|
 :skolemid |37|
 :pattern ( (swap_vector v@@18 i@@9 j@@0))
)))
(assert (= (|domain#Memory| EmptyMemory) ((as const (Array T@Location Bool)) false)))
(assert (= (|contents#Memory| EmptyMemory) ((as const (Array T@Location T@Value)) DefaultValue)))
(assert (forall ((m T@Memory) (idx Int) ) (! (= (GetLocal m idx) (select (|contents#Memory| m) (Local idx)))
 :qid |libracoi.316:31|
 :skolemid |38|
 :pattern ( (GetLocal m idx))
)))
(assert (forall ((m@@0 T@Memory) (idx@@0 Int) (v@@19 T@Value) ) (! (= (UpdateLocal m@@0 idx@@0 v@@19) (Memory (store (|domain#Memory| m@@0) (Local idx@@0) true) (store (|contents#Memory| m@@0) (Local idx@@0) v@@19)))
 :qid |libracoi.320:34|
 :skolemid |39|
 :pattern ( (UpdateLocal m@@0 idx@@0 v@@19))
)))
(assert (forall ((m@@1 T@Memory) (resource T@TypeValue) (addr Int) ) (!  (and (=> (ExistsResourceRaw m@@1 resource addr) (select (|domain#Memory| m@@1) (Global resource addr))) (=> (select (|domain#Memory| m@@1) (Global resource addr)) (ExistsResourceRaw m@@1 resource addr)))
 :qid |libracoi.335:40|
 :skolemid |40|
 :pattern ( (ExistsResourceRaw m@@1 resource addr))
)))
(assert (forall ((m@@2 T@Memory) (resource@@0 T@TypeValue) (addr@@0 Int) ) (! (= (ExistsResource m@@2 resource@@0 addr@@0) (Boolean (ExistsResourceRaw m@@2 resource@@0 addr@@0)))
 :qid |libracoi.338:37|
 :skolemid |41|
 :pattern ( (ExistsResource m@@2 resource@@0 addr@@0))
)))
(assert (forall ((resource@@1 T@TypeValue) (addr@@1 Int) ) (! (= (GetResourceReference resource@@1 addr@@1) (Reference (Global resource@@1 addr@@1) EmptyPath))
 :qid |libracoi.343:43|
 :skolemid |42|
 :pattern ( (GetResourceReference resource@@1 addr@@1))
)))
(assert (forall ((frame_idx Int) (idx@@1 Int) ) (! (= (GetLocalReference frame_idx idx@@1) (Reference (Local (+ frame_idx idx@@1)) EmptyPath))
 :qid |libracoi.348:40|
 :skolemid |43|
 :pattern ( (GetLocalReference frame_idx idx@@1))
)))
(assert (forall ((ref T@Reference) (field Int) ) (! (= (SelectFieldFromRef ref field) (Reference (|l#Reference| ref) (Path (store (|p#Path| (|p#Reference| ref)) (|size#Path| (|p#Reference| ref)) field) (+ (|size#Path| (|p#Reference| ref)) 1))))
 :qid |libracoi.353:41|
 :skolemid |44|
 :pattern ( (SelectFieldFromRef ref field))
)))
(assert (forall ((val T@Value) (field@@0 Int) ) (! (= (SelectField val field@@0) (select (vmap val) field@@0))
 :qid |libracoi.361:34|
 :skolemid |45|
 :pattern ( (SelectField val field@@0))
)))
(assert (forall ((m@@3 T@Memory) (ref@@0 T@Reference) ) (! (= (Dereference m@@3 ref@@0) (ReadValue (|p#Reference| ref@@0) (select (|contents#Memory| m@@3) (|l#Reference| ref@@0))))
 :qid |libracoi.366:34|
 :skolemid |46|
 :pattern ( (Dereference m@@3 ref@@0))
)))
(assert (forall ((m@@4 T@Memory) (txn T@Transaction) ) (!  (and (=> (ExistsTxnSenderAccount m@@4 txn) (select (|domain#Memory| m@@4) (Global LibraAccount_T_type_value (|sender#Transaction| txn)))) (=> (select (|domain#Memory| m@@4) (Global LibraAccount_T_type_value (|sender#Transaction| txn))) (ExistsTxnSenderAccount m@@4 txn)))
 :qid |libracoi.371:45|
 :skolemid |47|
 :pattern ( (ExistsTxnSenderAccount m@@4 txn))
)))
(assert (forall ((txn@@0 T@Transaction) ) (! (= (TxnSenderAddress txn@@0) (|sender#Transaction| txn@@0))
 :qid |libracoi.380:39|
 :skolemid |48|
 :pattern ( (TxnSenderAddress txn@@0))
)))
(assert (= LibraCoin_T_value 0))
(assert (= LibraCoin_T_type_value (StructType LibraCoin_T (ExtendTypeValueArray EmptyTypeValueArray IntegerType))))
(assert (= LibraCoin_MintCapability__dummy 0))
(assert (= LibraCoin_MintCapability_type_value (StructType LibraCoin_MintCapability (ExtendTypeValueArray EmptyTypeValueArray BooleanType))))
(assert (= LibraCoin_MarketCap_total_value 0))
(assert (= LibraCoin_MarketCap_type_value (StructType LibraCoin_MarketCap (ExtendTypeValueArray EmptyTypeValueArray IntegerType))))
(assert (forall ((i@@10 Int) (|l#0| Int) (|l#1| (Array Int T@Value)) (|l#2| (Array Int T@Value)) (|l#3| Int) ) (! (= (select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) i@@10) (ite (< i@@10 |l#0|) (select |l#1| i@@10) (select |l#2| (- i@@10 |l#3|))))
 :qid |libracoi.113:17|
 :skolemid |49|
 :pattern ( (select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) i@@10))
)))
(assert (forall ((i@@11 Int) (|l#0@@0| Int) (|l#1@@0| Int) (|l#2@@0| (Array Int T@Value)) (|l#3@@0| Int) (|l#4| Int) (|l#5| T@Value) ) (! (= (select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0| |l#4| |l#5|) i@@11) (ite  (and (<= |l#0@@0| i@@11) (< i@@11 |l#1@@0|)) (select |l#2@@0| (- (- |l#3@@0| i@@11) |l#4|)) |l#5|))
 :qid |libracoi.118:17|
 :skolemid |50|
 :pattern ( (select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0| |l#4| |l#5|) i@@11))
)))
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun abort_flag@5 () Bool)
(declare-fun m@22 () T@Memory)
(declare-fun m@@5 () T@Memory)
(declare-fun amount () T@Value)
(declare-fun %lbl%@2 () Bool)
(declare-fun inline$LibraCoin_mint_with_default_capability$0$ret0@2 () T@Value)
(declare-fun %lbl%@3 () Bool)
(declare-fun txn@@1 () T@Transaction)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%+5 () Bool)
(declare-fun %lbl%+6 () Bool)
(declare-fun abort_flag@4 () Bool)
(declare-fun %lbl%+7 () Bool)
(declare-fun abort_flag@0 () Bool)
(declare-fun %lbl%+8 () Bool)
(declare-fun inline$LibraCoin_mint$0$ret0@2 () T@Value)
(declare-fun m@21 () T@Memory)
(declare-fun m@20 () T@Memory)
(declare-fun local_counter () Int)
(declare-fun inline$LibraCoin_mint_with_default_capability$0$ret0@1 () T@Value)
(declare-fun %lbl%+9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun m@2 () T@Memory)
(declare-fun inline$LibraCoin_mint$0$value@0 () T@Value)
(declare-fun %lbl%@11 () Bool)
(declare-fun %lbl%@12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%+14 () Bool)
(declare-fun m@19 () T@Memory)
(declare-fun m@18 () T@Memory)
(declare-fun local_counter@0 () Int)
(declare-fun inline$Pack_LibraCoin_T$0$_struct@1 () T@Value)
(declare-fun inline$LibraCoin_mint$0$ret0@1 () T@Value)
(declare-fun abort_flag@3 () Bool)
(declare-fun %lbl%+15 () Bool)
(declare-fun inline$Pack_LibraCoin_T$0$value@0 () T@Value)
(declare-fun %lbl%+16 () Bool)
(declare-fun %lbl%+17 () Bool)
(declare-fun m@17 () T@Memory)
(declare-fun inline$CopyOrMoveValue$5$local@0 () T@Value)
(declare-fun %lbl%+18 () Bool)
(declare-fun %lbl%+19 () Bool)
(declare-fun inline$WriteRef$0$l@1 () T@Location)
(declare-fun inline$BorrowField$1$dst@1 () T@Reference)
(declare-fun inline$WriteRef$0$v@1 () T@Value)
(declare-fun m@16 () T@Memory)
(declare-fun inline$WriteRef$0$v@2 () T@Value)
(declare-fun inline$WriteRef$0$new_v@0 () T@Value)
(declare-fun %lbl%+20 () Bool)
(declare-fun %lbl%+21 () Bool)
(declare-fun inline$BorrowField$1$p@1 () T@Path)
(declare-fun inline$BorrowGlobal$1$dst@2 () T@Reference)
(declare-fun inline$BorrowField$1$size@1 () Int)
(declare-fun inline$BorrowField$1$p@2 () T@Path)
(declare-fun %lbl%+22 () Bool)
(declare-fun m@15 () T@Memory)
(declare-fun inline$AddU64$0$dst@2 () T@Value)
(declare-fun %lbl%+23 () Bool)
(declare-fun %lbl%+24 () Bool)
(declare-fun %lbl%+25 () Bool)
(declare-fun inline$AddU64$0$src1@0 () T@Value)
(declare-fun inline$AddU64$0$src2@0 () T@Value)
(declare-fun inline$AddU64$0$dst@1 () T@Value)
(declare-fun abort_flag@2 () Bool)
(declare-fun %lbl%+26 () Bool)
(declare-fun inline$AddU64$0$dst@0 () T@Value)
(declare-fun %lbl%+27 () Bool)
(declare-fun %lbl%+28 () Bool)
(declare-fun %lbl%+29 () Bool)
(declare-fun m@14 () T@Memory)
(declare-fun inline$CopyOrMoveValue$4$local@0 () T@Value)
(declare-fun %lbl%+30 () Bool)
(declare-fun %lbl%+31 () Bool)
(declare-fun m@13 () T@Memory)
(declare-fun inline$CopyOrMoveValue$3$local@0 () T@Value)
(declare-fun %lbl%+32 () Bool)
(declare-fun %lbl%+33 () Bool)
(declare-fun m@12 () T@Memory)
(declare-fun inline$CopyOrMoveValue$2$local@0 () T@Value)
(declare-fun %lbl%+34 () Bool)
(declare-fun %lbl%+35 () Bool)
(declare-fun inline$ReadRef$0$v@1 () T@Value)
(declare-fun m@11 () T@Memory)
(declare-fun %lbl%+36 () Bool)
(declare-fun inline$BorrowField$0$dst@1 () T@Reference)
(declare-fun %lbl%+37 () Bool)
(declare-fun inline$BorrowField$0$p@1 () T@Path)
(declare-fun inline$BorrowField$0$size@1 () Int)
(declare-fun inline$BorrowField$0$p@2 () T@Path)
(declare-fun %lbl%+38 () Bool)
(declare-fun %lbl%+39 () Bool)
(declare-fun %lbl%+40 () Bool)
(declare-fun inline$BorrowGlobal$1$ta@0 () T@TypeValue)
(declare-fun inline$BorrowGlobal$1$a@1 () Int)
(declare-fun inline$BorrowGlobal$1$dst@1 () T@Reference)
(declare-fun inline$BorrowGlobal$1$l@1 () T@Location)
(declare-fun abort_flag@1 () Bool)
(declare-fun %lbl%+41 () Bool)
(declare-fun inline$BorrowGlobal$1$dst@0 () T@Reference)
(declare-fun %lbl%+42 () Bool)
(declare-fun inline$BorrowGlobal$1$address@0 () T@Value)
(declare-fun %lbl%+43 () Bool)
(declare-fun %lbl%+44 () Bool)
(declare-fun m@9 () T@Memory)
(declare-fun inline$LdAddr$0$ret@1 () T@Value)
(declare-fun %lbl%+45 () Bool)
(declare-fun %lbl%+46 () Bool)
(declare-fun inline$LibraCoin_mint$0$tmp@1 () T@Value)
(declare-fun %lbl%+47 () Bool)
(declare-fun m@10 () T@Memory)
(declare-fun inline$LdConst$2$ret@1 () T@Value)
(declare-fun %lbl%+48 () Bool)
(declare-fun %lbl%+49 () Bool)
(declare-fun %lbl%+50 () Bool)
(declare-fun m@8 () T@Memory)
(declare-fun inline$Not$0$dst@1 () T@Value)
(declare-fun %lbl%+51 () Bool)
(declare-fun inline$Not$0$src@0 () T@Value)
(declare-fun %lbl%+52 () Bool)
(declare-fun %lbl%+53 () Bool)
(declare-fun m@7 () T@Memory)
(declare-fun inline$Le$0$dst@1 () T@Value)
(declare-fun %lbl%+54 () Bool)
(declare-fun inline$Le$0$src1@0 () T@Value)
(declare-fun inline$Le$0$src2@0 () T@Value)
(declare-fun %lbl%+55 () Bool)
(declare-fun %lbl%+56 () Bool)
(declare-fun m@6 () T@Memory)
(declare-fun inline$MulU64$0$dst@2 () T@Value)
(declare-fun %lbl%+57 () Bool)
(declare-fun %lbl%+58 () Bool)
(declare-fun inline$MulU64$0$src1@0 () T@Value)
(declare-fun inline$MulU64$0$src2@0 () T@Value)
(declare-fun inline$MulU64$0$dst@1 () T@Value)
(declare-fun %lbl%+59 () Bool)
(declare-fun inline$MulU64$0$dst@0 () T@Value)
(declare-fun %lbl%+60 () Bool)
(declare-fun %lbl%+61 () Bool)
(declare-fun %lbl%+62 () Bool)
(declare-fun m@5 () T@Memory)
(declare-fun inline$LdConst$1$ret@1 () T@Value)
(declare-fun %lbl%+63 () Bool)
(declare-fun %lbl%+64 () Bool)
(declare-fun m@4 () T@Memory)
(declare-fun inline$LdConst$0$ret@1 () T@Value)
(declare-fun %lbl%+65 () Bool)
(declare-fun %lbl%+66 () Bool)
(declare-fun m@3 () T@Memory)
(declare-fun inline$CopyOrMoveValue$1$local@0 () T@Value)
(declare-fun %lbl%+67 () Bool)
(declare-fun %lbl%+68 () Bool)
(declare-fun inline$BorrowGlobal$0$dst@2 () T@Reference)
(declare-fun local_counter@1 () Int)
(declare-fun %lbl%+69 () Bool)
(declare-fun %lbl%@70 () Bool)
(declare-fun %lbl%+71 () Bool)
(declare-fun %lbl%+72 () Bool)
(declare-fun inline$BorrowGlobal$0$ta@0 () T@TypeValue)
(declare-fun inline$BorrowGlobal$0$a@1 () Int)
(declare-fun inline$BorrowGlobal$0$dst@1 () T@Reference)
(declare-fun inline$BorrowGlobal$0$l@1 () T@Location)
(declare-fun abort_flag () Bool)
(declare-fun %lbl%+73 () Bool)
(declare-fun inline$BorrowGlobal$0$dst@0 () T@Reference)
(declare-fun %lbl%+74 () Bool)
(declare-fun inline$BorrowGlobal$0$address@0 () T@Value)
(declare-fun %lbl%+75 () Bool)
(declare-fun %lbl%+76 () Bool)
(declare-fun m@1 () T@Memory)
(declare-fun inline$GetTxnSenderAddress$0$ret_sender@1 () T@Value)
(declare-fun %lbl%+77 () Bool)
(declare-fun %lbl%+78 () Bool)
(declare-fun m@0 () T@Memory)
(declare-fun inline$CopyOrMoveValue$0$local@0 () T@Value)
(declare-fun %lbl%+79 () Bool)
(declare-fun %lbl%+80 () Bool)
(declare-fun %lbl%+81 () Bool)
(declare-fun %lbl%@82 () Bool)
(declare-fun %lbl%+83 () Bool)
(declare-fun %lbl%+84 () Bool)
(push 1)
(set-info :boogie-vc-id LibraCoin_mint_with_default_capability_verify)
(assert (not
(let ((inline$LibraCoin_mint_with_default_capability$0$Return_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (and (! (or %lbl%@1  (=> (not abort_flag@5) (|b#Boolean| (Boolean (= (SelectField (Dereference m@22 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value) (Integer (+ (|i#Integer| (SelectField (Dereference m@@5 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value)) (|i#Integer| amount)))))))) :lblneg @1) (=> (=> (not abort_flag@5) (|b#Boolean| (Boolean (= (SelectField (Dereference m@22 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value) (Integer (+ (|i#Integer| (SelectField (Dereference m@@5 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value)) (|i#Integer| amount))))))) (and (! (or %lbl%@2  (=> (not abort_flag@5) (|b#Boolean| (Boolean (= (SelectField inline$LibraCoin_mint_with_default_capability$0$ret0@2 LibraCoin_T_value) amount))))) :lblneg @2) (=> (=> (not abort_flag@5) (|b#Boolean| (Boolean (= (SelectField inline$LibraCoin_mint_with_default_capability$0$ret0@2 LibraCoin_T_value) amount)))) (and (! (or %lbl%@3  (=> (not (or (or (or (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@@5 LibraCoin_MintCapability_type_value (|a#Address| (Address (TxnSenderAddress txn@@1)))))))) (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@@5 LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))))))) (|b#Boolean| (Boolean (> (|i#Integer| amount) (|i#Integer| (Integer 1000000000000000)))))) (|b#Boolean| (Boolean (> (|i#Integer| (Integer (+ (|i#Integer| amount) (|i#Integer| (SelectField (Dereference m@@5 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value))))) (|i#Integer| (Integer 9223372036854775807))))))) (not abort_flag@5))) :lblneg @3) (=> (=> (not (or (or (or (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@@5 LibraCoin_MintCapability_type_value (|a#Address| (Address (TxnSenderAddress txn@@1)))))))) (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@@5 LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))))))) (|b#Boolean| (Boolean (> (|i#Integer| amount) (|i#Integer| (Integer 1000000000000000)))))) (|b#Boolean| (Boolean (> (|i#Integer| (Integer (+ (|i#Integer| amount) (|i#Integer| (SelectField (Dereference m@@5 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value))))) (|i#Integer| (Integer 9223372036854775807))))))) (not abort_flag@5)) (! (or %lbl%@4  (=> (or (or (or (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@@5 LibraCoin_MintCapability_type_value (|a#Address| (Address (TxnSenderAddress txn@@1)))))))) (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@@5 LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))))))) (|b#Boolean| (Boolean (> (|i#Integer| amount) (|i#Integer| (Integer 1000000000000000)))))) (|b#Boolean| (Boolean (> (|i#Integer| (Integer (+ (|i#Integer| amount) (|i#Integer| (SelectField (Dereference m@@5 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value))))) (|i#Integer| (Integer 9223372036854775807)))))) abort_flag@5)) :lblneg @4))))))))))
(let ((inline$LibraCoin_mint_with_default_capability$0$Label_Abort_correct  (=> (! (and %lbl%+5 true) :lblpos +5) (=> (= inline$LibraCoin_mint_with_default_capability$0$ret0@2 DefaultValue) (=> (and (and (=> abort_flag@5 true) (=> true abort_flag@5)) (= m@22 m@@5)) inline$LibraCoin_mint_with_default_capability$0$Return_correct)))))
(let ((inline$LibraCoin_mint_with_default_capability$0$anon6_Then_correct  (=> (! (and %lbl%+6 true) :lblpos +6) (=> abort_flag@4 inline$LibraCoin_mint_with_default_capability$0$Label_Abort_correct))))
(let ((inline$LibraCoin_mint_with_default_capability$0$anon5_Then_correct  (=> (! (and %lbl%+7 true) :lblpos +7) (=> abort_flag@0 inline$LibraCoin_mint_with_default_capability$0$Label_Abort_correct))))
(let ((inline$LibraCoin_mint_with_default_capability$0$anon6_Else_correct  (=> (! (and %lbl%+8 true) :lblpos +8) (=> (not abort_flag@4) (=> (and (and (and (is-Vector inline$LibraCoin_mint$0$ret0@2) (= m@21 (UpdateLocal m@20 (+ local_counter 4) inline$LibraCoin_mint$0$ret0@2))) (and (= inline$LibraCoin_mint_with_default_capability$0$ret0@1 (GetLocal m@21 (+ local_counter 4))) (= inline$LibraCoin_mint_with_default_capability$0$ret0@2 inline$LibraCoin_mint_with_default_capability$0$ret0@1))) (and (and (=> abort_flag@5 abort_flag@4) (=> abort_flag@4 abort_flag@5)) (= m@22 m@21))) inline$LibraCoin_mint_with_default_capability$0$Return_correct)))))
(let ((inline$LibraCoin_mint$0$Return_correct  (=> (! (and %lbl%+9 true) :lblpos +9) (and (! (or %lbl%@10  (=> (not abort_flag@4) (|b#Boolean| (Boolean (= (SelectField (Dereference m@20 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value) (Integer (+ (|i#Integer| (SelectField (Dereference m@2 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value)) (|i#Integer| inline$LibraCoin_mint$0$value@0)))))))) :lblneg @10) (=> (=> (not abort_flag@4) (|b#Boolean| (Boolean (= (SelectField (Dereference m@20 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value) (Integer (+ (|i#Integer| (SelectField (Dereference m@2 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value)) (|i#Integer| inline$LibraCoin_mint$0$value@0))))))) (and (! (or %lbl%@11  (=> (not abort_flag@4) (|b#Boolean| (Boolean (= (SelectField inline$LibraCoin_mint$0$ret0@2 LibraCoin_T_value) inline$LibraCoin_mint$0$value@0))))) :lblneg @11) (=> (=> (not abort_flag@4) (|b#Boolean| (Boolean (= (SelectField inline$LibraCoin_mint$0$ret0@2 LibraCoin_T_value) inline$LibraCoin_mint$0$value@0)))) (and (! (or %lbl%@12  (=> (not (or (or (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@2 LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816))))))) (|b#Boolean| (Boolean (> (|i#Integer| inline$LibraCoin_mint$0$value@0) (|i#Integer| (Integer 1000000000000000)))))) (|b#Boolean| (Boolean (> (|i#Integer| (Integer (+ (|i#Integer| inline$LibraCoin_mint$0$value@0) (|i#Integer| (SelectField (Dereference m@2 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value))))) (|i#Integer| (Integer 9223372036854775807))))))) (not abort_flag@4))) :lblneg @12) (=> (=> (not (or (or (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@2 LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816))))))) (|b#Boolean| (Boolean (> (|i#Integer| inline$LibraCoin_mint$0$value@0) (|i#Integer| (Integer 1000000000000000)))))) (|b#Boolean| (Boolean (> (|i#Integer| (Integer (+ (|i#Integer| inline$LibraCoin_mint$0$value@0) (|i#Integer| (SelectField (Dereference m@2 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value))))) (|i#Integer| (Integer 9223372036854775807))))))) (not abort_flag@4)) (and (! (or %lbl%@13  (=> (or (or (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@2 LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816))))))) (|b#Boolean| (Boolean (> (|i#Integer| inline$LibraCoin_mint$0$value@0) (|i#Integer| (Integer 1000000000000000)))))) (|b#Boolean| (Boolean (> (|i#Integer| (Integer (+ (|i#Integer| inline$LibraCoin_mint$0$value@0) (|i#Integer| (SelectField (Dereference m@2 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value))))) (|i#Integer| (Integer 9223372036854775807)))))) abort_flag@4)) :lblneg @13) (=> (=> (or (or (|b#Boolean| (Boolean  (not (|b#Boolean| (ExistsResource m@2 LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816))))))) (|b#Boolean| (Boolean (> (|i#Integer| inline$LibraCoin_mint$0$value@0) (|i#Integer| (Integer 1000000000000000)))))) (|b#Boolean| (Boolean (> (|i#Integer| (Integer (+ (|i#Integer| inline$LibraCoin_mint$0$value@0) (|i#Integer| (SelectField (Dereference m@2 (GetResourceReference LibraCoin_MarketCap_type_value (|a#Address| (Address 173345816)))) LibraCoin_MarketCap_total_value))))) (|i#Integer| (Integer 9223372036854775807)))))) abort_flag@4) (and inline$LibraCoin_mint_with_default_capability$0$anon6_Then_correct inline$LibraCoin_mint_with_default_capability$0$anon6_Else_correct))))))))))))
(let ((inline$LibraCoin_mint$0$anon12_Else$5_correct  (=> (! (and %lbl%+14 true) :lblpos +14) (=> (and (= m@19 (UpdateLocal m@18 (+ local_counter@0 23) inline$Pack_LibraCoin_T$0$_struct@1)) (= inline$LibraCoin_mint$0$ret0@1 (GetLocal m@19 (+ local_counter@0 23)))) (=> (and (and (= m@20 m@19) (= inline$LibraCoin_mint$0$ret0@2 inline$LibraCoin_mint$0$ret0@1)) (and (=> abort_flag@4 abort_flag@3) (=> abort_flag@3 abort_flag@4))) inline$LibraCoin_mint$0$Return_correct)))))
(let ((inline$Pack_LibraCoin_T$0$anon0_correct  (=> (! (and %lbl%+15 true) :lblpos +15) (=> (and (and (and (is-Integer inline$Pack_LibraCoin_T$0$value@0) (>= (|i#Integer| inline$Pack_LibraCoin_T$0$value@0) 0)) (<= (|i#Integer| inline$Pack_LibraCoin_T$0$value@0) MAX_U64)) (= inline$Pack_LibraCoin_T$0$_struct@1 (Vector (ExtendValueArray EmptyValueArray inline$Pack_LibraCoin_T$0$value@0)))) inline$LibraCoin_mint$0$anon12_Else$5_correct))))
(let ((inline$Pack_LibraCoin_T$0$Entry_correct  (=> (! (and %lbl%+16 true) :lblpos +16) (=> (= inline$Pack_LibraCoin_T$0$value@0 (GetLocal m@18 (+ local_counter@0 22))) inline$Pack_LibraCoin_T$0$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon12_Else$4_correct  (=> (! (and %lbl%+17 true) :lblpos +17) (=> (= m@18 (UpdateLocal m@17 (+ local_counter@0 22) inline$CopyOrMoveValue$5$local@0)) inline$Pack_LibraCoin_T$0$Entry_correct))))
(let ((inline$CopyOrMoveValue$5$Entry_correct  (=> (! (and %lbl%+18 true) :lblpos +18) (=> (= inline$CopyOrMoveValue$5$local@0 (GetLocal m@17 (+ local_counter@0 0))) inline$LibraCoin_mint$0$anon12_Else$4_correct))))
(let ((inline$WriteRef$0$anon0_correct  (=> (! (and %lbl%+19 true) :lblpos +19) (=> (and (and (= inline$WriteRef$0$l@1 (|l#Reference| inline$BorrowField$1$dst@1)) (= inline$WriteRef$0$v@1 (select (|contents#Memory| m@16) inline$WriteRef$0$l@1))) (and (= inline$WriteRef$0$v@2 (UpdateValue (|p#Reference| inline$BorrowField$1$dst@1) inline$WriteRef$0$v@1 inline$WriteRef$0$new_v@0)) (= m@17 (Memory (|domain#Memory| m@16) (store (|contents#Memory| m@16) inline$WriteRef$0$l@1 inline$WriteRef$0$v@2))))) inline$CopyOrMoveValue$5$Entry_correct))))
(let ((inline$WriteRef$0$Entry_correct  (=> (! (and %lbl%+20 true) :lblpos +20) (=> (= inline$WriteRef$0$new_v@0 (GetLocal m@16 (+ local_counter@0 19))) inline$WriteRef$0$anon0_correct))))
(let ((inline$BorrowField$1$anon0_correct  (=> (! (and %lbl%+21 true) :lblpos +21) (=> (and (and (= inline$BorrowField$1$p@1 (|p#Reference| inline$BorrowGlobal$1$dst@2)) (= inline$BorrowField$1$size@1 (|size#Path| inline$BorrowField$1$p@1))) (and (= inline$BorrowField$1$p@2 (Path (store (|p#Path| inline$BorrowField$1$p@1) inline$BorrowField$1$size@1 LibraCoin_MarketCap_total_value) (+ inline$BorrowField$1$size@1 1))) (= inline$BorrowField$1$dst@1 (Reference (|l#Reference| inline$BorrowGlobal$1$dst@2) inline$BorrowField$1$p@2)))) inline$WriteRef$0$Entry_correct))))
(let ((inline$LibraCoin_mint$0$anon12_Else_correct  (=> (! (and %lbl%+22 true) :lblpos +22) (=> (and (not abort_flag@3) (= m@16 (UpdateLocal m@15 (+ local_counter@0 19) inline$AddU64$0$dst@2))) inline$BorrowField$1$anon0_correct))))
(let ((inline$LibraCoin_mint$0$Label_Abort_correct  (=> (! (and %lbl%+23 true) :lblpos +23) (=> (and (and (= m@20 m@2) (= inline$LibraCoin_mint$0$ret0@2 DefaultValue)) (and (=> abort_flag@4 true) (=> true abort_flag@4))) inline$LibraCoin_mint$0$Return_correct))))
(let ((inline$LibraCoin_mint$0$anon12_Then_correct  (=> (! (and %lbl%+24 true) :lblpos +24) (=> abort_flag@3 inline$LibraCoin_mint$0$Label_Abort_correct))))
(let ((inline$AddU64$0$anon3_Else_correct  (=> (! (and %lbl%+25 true) :lblpos +25) (=> (and (>= MAX_U64 (+ (|i#Integer| inline$AddU64$0$src1@0) (|i#Integer| inline$AddU64$0$src2@0))) (= inline$AddU64$0$dst@1 (Integer (+ (|i#Integer| inline$AddU64$0$src1@0) (|i#Integer| inline$AddU64$0$src2@0))))) (=> (and (and (=> abort_flag@3 abort_flag@2) (=> abort_flag@2 abort_flag@3)) (= inline$AddU64$0$dst@2 inline$AddU64$0$dst@1)) (and inline$LibraCoin_mint$0$anon12_Then_correct inline$LibraCoin_mint$0$anon12_Else_correct))))))
(let ((inline$AddU64$0$anon3_Then_correct  (=> (! (and %lbl%+26 true) :lblpos +26) (=> (> (+ (|i#Integer| inline$AddU64$0$src1@0) (|i#Integer| inline$AddU64$0$src2@0)) MAX_U64) (=> (and (and (=> abort_flag@3 true) (=> true abort_flag@3)) (= inline$AddU64$0$dst@2 inline$AddU64$0$dst@0)) (and inline$LibraCoin_mint$0$anon12_Then_correct inline$LibraCoin_mint$0$anon12_Else_correct))))))
(let ((inline$AddU64$0$anon0_correct  (=> (! (and %lbl%+27 true) :lblpos +27) (=> (and (and (and (is-Integer inline$AddU64$0$src1@0) (>= (|i#Integer| inline$AddU64$0$src1@0) 0)) (<= (|i#Integer| inline$AddU64$0$src1@0) MAX_U64)) (and (and (is-Integer inline$AddU64$0$src2@0) (>= (|i#Integer| inline$AddU64$0$src2@0) 0)) (<= (|i#Integer| inline$AddU64$0$src2@0) MAX_U64))) (and inline$AddU64$0$anon3_Then_correct inline$AddU64$0$anon3_Else_correct)))))
(let ((inline$AddU64$0$Entry_correct  (=> (! (and %lbl%+28 true) :lblpos +28) (=> (and (= inline$AddU64$0$src1@0 (GetLocal m@15 (+ local_counter@0 17))) (= inline$AddU64$0$src2@0 (GetLocal m@15 (+ local_counter@0 18)))) inline$AddU64$0$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon11_Else$7_correct  (=> (! (and %lbl%+29 true) :lblpos +29) (=> (= m@15 (UpdateLocal m@14 (+ local_counter@0 18) inline$CopyOrMoveValue$4$local@0)) inline$AddU64$0$Entry_correct))))
(let ((inline$CopyOrMoveValue$4$Entry_correct  (=> (! (and %lbl%+30 true) :lblpos +30) (=> (= inline$CopyOrMoveValue$4$local@0 (GetLocal m@14 (+ local_counter@0 0))) inline$LibraCoin_mint$0$anon11_Else$7_correct))))
(let ((inline$LibraCoin_mint$0$anon11_Else$6_correct  (=> (! (and %lbl%+31 true) :lblpos +31) (=> (= m@14 (UpdateLocal m@13 (+ local_counter@0 17) inline$CopyOrMoveValue$3$local@0)) inline$CopyOrMoveValue$4$Entry_correct))))
(let ((inline$CopyOrMoveValue$3$Entry_correct  (=> (! (and %lbl%+32 true) :lblpos +32) (=> (= inline$CopyOrMoveValue$3$local@0 (GetLocal m@13 (+ local_counter@0 3))) inline$LibraCoin_mint$0$anon11_Else$6_correct))))
(let ((inline$LibraCoin_mint$0$anon11_Else$5_correct  (=> (! (and %lbl%+33 true) :lblpos +33) (=> (= m@13 (UpdateLocal m@12 (+ local_counter@0 3) inline$CopyOrMoveValue$2$local@0)) inline$CopyOrMoveValue$3$Entry_correct))))
(let ((inline$CopyOrMoveValue$2$Entry_correct  (=> (! (and %lbl%+34 true) :lblpos +34) (=> (= inline$CopyOrMoveValue$2$local@0 (GetLocal m@12 (+ local_counter@0 16))) inline$LibraCoin_mint$0$anon11_Else$5_correct))))
(let ((inline$LibraCoin_mint$0$anon11_Else$4_correct  (=> (! (and %lbl%+35 true) :lblpos +35) (=> (and (and (and (is-Integer inline$ReadRef$0$v@1) (>= (|i#Integer| inline$ReadRef$0$v@1) 0)) (<= (|i#Integer| inline$ReadRef$0$v@1) MAX_U64)) (= m@12 (UpdateLocal m@11 (+ local_counter@0 16) inline$ReadRef$0$v@1))) inline$CopyOrMoveValue$2$Entry_correct))))
(let ((inline$ReadRef$0$anon0_correct  (=> (! (and %lbl%+36 true) :lblpos +36) (=> (= inline$ReadRef$0$v@1 (ReadValue (|p#Reference| inline$BorrowField$0$dst@1) (select (|contents#Memory| m@11) (|l#Reference| inline$BorrowField$0$dst@1)))) inline$LibraCoin_mint$0$anon11_Else$4_correct))))
(let ((inline$BorrowField$0$anon0_correct  (=> (! (and %lbl%+37 true) :lblpos +37) (=> (and (and (= inline$BorrowField$0$p@1 (|p#Reference| inline$BorrowGlobal$1$dst@2)) (= inline$BorrowField$0$size@1 (|size#Path| inline$BorrowField$0$p@1))) (and (= inline$BorrowField$0$p@2 (Path (store (|p#Path| inline$BorrowField$0$p@1) inline$BorrowField$0$size@1 LibraCoin_MarketCap_total_value) (+ inline$BorrowField$0$size@1 1))) (= inline$BorrowField$0$dst@1 (Reference (|l#Reference| inline$BorrowGlobal$1$dst@2) inline$BorrowField$0$p@2)))) inline$ReadRef$0$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon11_Else_correct  (=> (! (and %lbl%+38 true) :lblpos +38) (=> (not abort_flag@2) inline$BorrowField$0$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon11_Then_correct  (=> (! (and %lbl%+39 true) :lblpos +39) (=> abort_flag@2 inline$LibraCoin_mint$0$Label_Abort_correct))))
(let ((inline$BorrowGlobal$1$anon3_Else_correct  (=> (! (and %lbl%+40 true) :lblpos +40) (=> (and (ExistsResourceRaw m@11 inline$BorrowGlobal$1$ta@0 inline$BorrowGlobal$1$a@1) (= inline$BorrowGlobal$1$dst@1 (Reference inline$BorrowGlobal$1$l@1 EmptyPath))) (=> (and (and (=> abort_flag@2 abort_flag@1) (=> abort_flag@1 abort_flag@2)) (= inline$BorrowGlobal$1$dst@2 inline$BorrowGlobal$1$dst@1)) (and inline$LibraCoin_mint$0$anon11_Then_correct inline$LibraCoin_mint$0$anon11_Else_correct))))))
(let ((inline$BorrowGlobal$1$anon3_Then_correct  (=> (! (and %lbl%+41 true) :lblpos +41) (=> (not (ExistsResourceRaw m@11 inline$BorrowGlobal$1$ta@0 inline$BorrowGlobal$1$a@1)) (=> (and (and (=> abort_flag@2 true) (=> true abort_flag@2)) (= inline$BorrowGlobal$1$dst@2 inline$BorrowGlobal$1$dst@0)) (and inline$LibraCoin_mint$0$anon11_Then_correct inline$LibraCoin_mint$0$anon11_Else_correct))))))
(let ((inline$BorrowGlobal$1$anon0_correct  (=> (! (and %lbl%+42 true) :lblpos +42) (=> (is-Address inline$BorrowGlobal$1$address@0) (=> (and (= inline$BorrowGlobal$1$a@1 (|a#Address| inline$BorrowGlobal$1$address@0)) (= inline$BorrowGlobal$1$l@1 (Global inline$BorrowGlobal$1$ta@0 inline$BorrowGlobal$1$a@1))) (and inline$BorrowGlobal$1$anon3_Then_correct inline$BorrowGlobal$1$anon3_Else_correct))))))
(let ((inline$BorrowGlobal$1$Entry_correct  (=> (! (and %lbl%+43 true) :lblpos +43) (=> (and (= inline$BorrowGlobal$1$address@0 (GetLocal m@11 (+ local_counter@0 12))) (= inline$BorrowGlobal$1$ta@0 LibraCoin_MarketCap_type_value)) inline$BorrowGlobal$1$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon10_Then$1_correct  (=> (! (and %lbl%+44 true) :lblpos +44) (=> (= m@11 (UpdateLocal m@9 (+ local_counter@0 12) inline$LdAddr$0$ret@1)) inline$BorrowGlobal$1$Entry_correct))))
(let ((inline$LdAddr$0$anon0_correct  (=> (! (and %lbl%+45 true) :lblpos +45) (=> (= inline$LdAddr$0$ret@1 (Address 173345816)) inline$LibraCoin_mint$0$anon10_Then$1_correct))))
(let ((inline$LibraCoin_mint$0$anon10_Then_correct  (=> (! (and %lbl%+46 true) :lblpos +46) (=> (not (|b#Boolean| inline$LibraCoin_mint$0$tmp@1)) inline$LdAddr$0$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon10_Else$1_correct  (=> (! (and %lbl%+47 true) :lblpos +47) (=> (= m@10 (UpdateLocal m@9 (+ local_counter@0 11) inline$LdConst$2$ret@1)) inline$LibraCoin_mint$0$Label_Abort_correct))))
(let ((inline$LdConst$2$anon0_correct  (=> (! (and %lbl%+48 true) :lblpos +48) (=> (= inline$LdConst$2$ret@1 (Integer 11)) inline$LibraCoin_mint$0$anon10_Else$1_correct))))
(let ((inline$LibraCoin_mint$0$anon10_Else_correct  (=> (! (and %lbl%+49 true) :lblpos +49) (=> (|b#Boolean| inline$LibraCoin_mint$0$tmp@1) inline$LdConst$2$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon9_Else$2_correct  (=> (! (and %lbl%+50 true) :lblpos +50) (=> (and (= m@9 (UpdateLocal m@8 (+ local_counter@0 10) inline$Not$0$dst@1)) (= inline$LibraCoin_mint$0$tmp@1 (GetLocal m@9 (+ local_counter@0 10)))) (and inline$LibraCoin_mint$0$anon10_Then_correct inline$LibraCoin_mint$0$anon10_Else_correct)))))
(let ((inline$Not$0$anon0_correct  (=> (! (and %lbl%+51 true) :lblpos +51) (=> (and (is-Boolean inline$Not$0$src@0) (= inline$Not$0$dst@1 (Boolean  (not (|b#Boolean| inline$Not$0$src@0))))) inline$LibraCoin_mint$0$anon9_Else$2_correct))))
(let ((inline$Not$0$Entry_correct  (=> (! (and %lbl%+52 true) :lblpos +52) (=> (= inline$Not$0$src@0 (GetLocal m@8 (+ local_counter@0 9))) inline$Not$0$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon9_Else$1_correct  (=> (! (and %lbl%+53 true) :lblpos +53) (=> (= m@8 (UpdateLocal m@7 (+ local_counter@0 9) inline$Le$0$dst@1)) inline$Not$0$Entry_correct))))
(let ((inline$Le$0$anon0_correct  (=> (! (and %lbl%+54 true) :lblpos +54) (=> (and (and (is-Integer inline$Le$0$src1@0) (is-Integer inline$Le$0$src2@0)) (= inline$Le$0$dst@1 (Boolean (<= (|i#Integer| inline$Le$0$src1@0) (|i#Integer| inline$Le$0$src2@0))))) inline$LibraCoin_mint$0$anon9_Else$1_correct))))
(let ((inline$Le$0$Entry_correct  (=> (! (and %lbl%+55 true) :lblpos +55) (=> (and (= inline$Le$0$src1@0 (GetLocal m@7 (+ local_counter@0 5))) (= inline$Le$0$src2@0 (GetLocal m@7 (+ local_counter@0 8)))) inline$Le$0$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon9_Else_correct  (=> (! (and %lbl%+56 true) :lblpos +56) (=> (and (not abort_flag@1) (= m@7 (UpdateLocal m@6 (+ local_counter@0 8) inline$MulU64$0$dst@2))) inline$Le$0$Entry_correct))))
(let ((inline$LibraCoin_mint$0$anon9_Then_correct  (=> (! (and %lbl%+57 true) :lblpos +57) (=> abort_flag@1 inline$LibraCoin_mint$0$Label_Abort_correct))))
(let ((inline$MulU64$0$anon3_Else_correct  (=> (! (and %lbl%+58 true) :lblpos +58) (=> (and (>= MAX_U64 (* (|i#Integer| inline$MulU64$0$src1@0) (|i#Integer| inline$MulU64$0$src2@0))) (= inline$MulU64$0$dst@1 (Integer (* (|i#Integer| inline$MulU64$0$src1@0) (|i#Integer| inline$MulU64$0$src2@0))))) (=> (and (and (=> abort_flag@1 abort_flag@0) (=> abort_flag@0 abort_flag@1)) (= inline$MulU64$0$dst@2 inline$MulU64$0$dst@1)) (and inline$LibraCoin_mint$0$anon9_Then_correct inline$LibraCoin_mint$0$anon9_Else_correct))))))
(let ((inline$MulU64$0$anon3_Then_correct  (=> (! (and %lbl%+59 true) :lblpos +59) (=> (> (* (|i#Integer| inline$MulU64$0$src1@0) (|i#Integer| inline$MulU64$0$src2@0)) MAX_U64) (=> (and (and (=> abort_flag@1 true) (=> true abort_flag@1)) (= inline$MulU64$0$dst@2 inline$MulU64$0$dst@0)) (and inline$LibraCoin_mint$0$anon9_Then_correct inline$LibraCoin_mint$0$anon9_Else_correct))))))
(let ((inline$MulU64$0$anon0_correct  (=> (! (and %lbl%+60 true) :lblpos +60) (=> (and (and (and (is-Integer inline$MulU64$0$src1@0) (>= (|i#Integer| inline$MulU64$0$src1@0) 0)) (<= (|i#Integer| inline$MulU64$0$src1@0) MAX_U64)) (and (and (is-Integer inline$MulU64$0$src2@0) (>= (|i#Integer| inline$MulU64$0$src2@0) 0)) (<= (|i#Integer| inline$MulU64$0$src2@0) MAX_U64))) (and inline$MulU64$0$anon3_Then_correct inline$MulU64$0$anon3_Else_correct)))))
(let ((inline$MulU64$0$Entry_correct  (=> (! (and %lbl%+61 true) :lblpos +61) (=> (and (= inline$MulU64$0$src1@0 (GetLocal m@6 (+ local_counter@0 6))) (= inline$MulU64$0$src2@0 (GetLocal m@6 (+ local_counter@0 7)))) inline$MulU64$0$anon0_correct))))
(let ((inline$LibraCoin_mint$0$anon0$4_correct  (=> (! (and %lbl%+62 true) :lblpos +62) (=> (= m@6 (UpdateLocal m@5 (+ local_counter@0 7) inline$LdConst$1$ret@1)) inline$MulU64$0$Entry_correct))))
(let ((inline$LdConst$1$anon0_correct  (=> (! (and %lbl%+63 true) :lblpos +63) (=> (= inline$LdConst$1$ret@1 (Integer 1000000)) inline$LibraCoin_mint$0$anon0$4_correct))))
(let ((inline$LibraCoin_mint$0$anon0$3_correct  (=> (! (and %lbl%+64 true) :lblpos +64) (=> (= m@5 (UpdateLocal m@4 (+ local_counter@0 6) inline$LdConst$0$ret@1)) inline$LdConst$1$anon0_correct))))
(let ((inline$LdConst$0$anon0_correct  (=> (! (and %lbl%+65 true) :lblpos +65) (=> (= inline$LdConst$0$ret@1 (Integer 1000000000)) inline$LibraCoin_mint$0$anon0$3_correct))))
(let ((inline$LibraCoin_mint$0$anon0$2_correct  (=> (! (and %lbl%+66 true) :lblpos +66) (=> (= m@4 (UpdateLocal m@3 (+ local_counter@0 5) inline$CopyOrMoveValue$1$local@0)) inline$LdConst$0$anon0_correct))))
(let ((inline$CopyOrMoveValue$1$Entry_correct  (=> (! (and %lbl%+67 true) :lblpos +67) (=> (= inline$CopyOrMoveValue$1$local@0 (GetLocal m@3 (+ local_counter@0 0))) inline$LibraCoin_mint$0$anon0$2_correct))))
(let ((inline$LibraCoin_mint$0$anon0_correct  (=> (! (and %lbl%+68 true) :lblpos +68) (=> (not abort_flag@0) (=> (and (and (and (is-Integer inline$LibraCoin_mint$0$value@0) (>= (|i#Integer| inline$LibraCoin_mint$0$value@0) 0)) (<= (|i#Integer| inline$LibraCoin_mint$0$value@0) MAX_U64)) (is-Vector (Dereference m@2 inline$BorrowGlobal$0$dst@2))) (=> (and (and (and (and (and (=> (is-Local (|l#Reference| inline$BorrowGlobal$0$dst@2)) (< (|i#Local| (|l#Reference| inline$BorrowGlobal$0$dst@2)) local_counter@0)) (and (>= (|size#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 0) (< (|size#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) StratificationDepth))) (or (= (|size#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 0) (and (and (is-Vector (select (|contents#Memory| m@2) (|l#Reference| inline$BorrowGlobal$0$dst@2))) (>= (select (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 0) 0)) (< (select (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 0) (vlen (select (|contents#Memory| m@2) (|l#Reference| inline$BorrowGlobal$0$dst@2))))))) (or (<= (|size#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 1) (and (and (is-Vector (ReadValue (Path (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 1) (select (|contents#Memory| m@2) (|l#Reference| inline$BorrowGlobal$0$dst@2)))) (>= (select (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 1) 0)) (< (select (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 1) (vlen (ReadValue (Path (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 1) (select (|contents#Memory| m@2) (|l#Reference| inline$BorrowGlobal$0$dst@2)))))))) (or (<= (|size#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 2) (and (and (is-Vector (ReadValue (Path (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 2) (select (|contents#Memory| m@2) (|l#Reference| inline$BorrowGlobal$0$dst@2)))) (>= (select (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 1) 0)) (< (select (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 1) (vlen (ReadValue (Path (|p#Path| (|p#Reference| inline$BorrowGlobal$0$dst@2)) 2) (select (|contents#Memory| m@2) (|l#Reference| inline$BorrowGlobal$0$dst@2)))))))) (and (= local_counter@1 (+ local_counter@0 24)) (= m@3 (UpdateLocal m@2 (+ local_counter@0 0) inline$LibraCoin_mint$0$value@0)))) inline$CopyOrMoveValue$1$Entry_correct))))))
(let ((inline$LibraCoin_mint$0$Entry_correct  (=> (! (and %lbl%+69 true) :lblpos +69) (=> (= inline$LibraCoin_mint$0$value@0 (GetLocal m@2 (+ local_counter 1))) (and (! (or %lbl%@70 (ExistsTxnSenderAccount m@2 txn@@1)) :lblneg @70) (=> (ExistsTxnSenderAccount m@2 txn@@1) inline$LibraCoin_mint$0$anon0_correct))))))
(let ((inline$LibraCoin_mint_with_default_capability$0$anon5_Else_correct  (=> (! (and %lbl%+71 true) :lblpos +71) (=> (not abort_flag@0) inline$LibraCoin_mint$0$Entry_correct))))
(let ((inline$BorrowGlobal$0$anon3_Else_correct  (=> (! (and %lbl%+72 true) :lblpos +72) (=> (ExistsResourceRaw m@2 inline$BorrowGlobal$0$ta@0 inline$BorrowGlobal$0$a@1) (=> (and (and (= inline$BorrowGlobal$0$dst@1 (Reference inline$BorrowGlobal$0$l@1 EmptyPath)) (= inline$BorrowGlobal$0$dst@2 inline$BorrowGlobal$0$dst@1)) (and (=> abort_flag@0 abort_flag) (=> abort_flag abort_flag@0))) (and inline$LibraCoin_mint_with_default_capability$0$anon5_Then_correct inline$LibraCoin_mint_with_default_capability$0$anon5_Else_correct))))))
(let ((inline$BorrowGlobal$0$anon3_Then_correct  (=> (! (and %lbl%+73 true) :lblpos +73) (=> (and (and (not (ExistsResourceRaw m@2 inline$BorrowGlobal$0$ta@0 inline$BorrowGlobal$0$a@1)) (= inline$BorrowGlobal$0$dst@2 inline$BorrowGlobal$0$dst@0)) (and (=> abort_flag@0 true) (=> true abort_flag@0))) (and inline$LibraCoin_mint_with_default_capability$0$anon5_Then_correct inline$LibraCoin_mint_with_default_capability$0$anon5_Else_correct)))))
(let ((inline$BorrowGlobal$0$anon0_correct  (=> (! (and %lbl%+74 true) :lblpos +74) (=> (is-Address inline$BorrowGlobal$0$address@0) (=> (and (= inline$BorrowGlobal$0$a@1 (|a#Address| inline$BorrowGlobal$0$address@0)) (= inline$BorrowGlobal$0$l@1 (Global inline$BorrowGlobal$0$ta@0 inline$BorrowGlobal$0$a@1))) (and inline$BorrowGlobal$0$anon3_Then_correct inline$BorrowGlobal$0$anon3_Else_correct))))))
(let ((inline$BorrowGlobal$0$Entry_correct  (=> (! (and %lbl%+75 true) :lblpos +75) (=> (and (= inline$BorrowGlobal$0$address@0 (GetLocal m@2 (+ local_counter 2))) (= inline$BorrowGlobal$0$ta@0 LibraCoin_MintCapability_type_value)) inline$BorrowGlobal$0$anon0_correct))))
(let ((inline$LibraCoin_mint_with_default_capability$0$anon0$2_correct  (=> (! (and %lbl%+76 true) :lblpos +76) (=> (= m@2 (UpdateLocal m@1 (+ local_counter 2) inline$GetTxnSenderAddress$0$ret_sender@1)) inline$BorrowGlobal$0$Entry_correct))))
(let ((inline$GetTxnSenderAddress$0$anon0_correct  (=> (! (and %lbl%+77 true) :lblpos +77) (=> (= inline$GetTxnSenderAddress$0$ret_sender@1 (Address (|sender#Transaction| txn@@1))) inline$LibraCoin_mint_with_default_capability$0$anon0$2_correct))))
(let ((inline$LibraCoin_mint_with_default_capability$0$anon0$1_correct  (=> (! (and %lbl%+78 true) :lblpos +78) (=> (= m@1 (UpdateLocal m@0 (+ local_counter 1) inline$CopyOrMoveValue$0$local@0)) inline$GetTxnSenderAddress$0$anon0_correct))))
(let ((inline$CopyOrMoveValue$0$Entry_correct  (=> (! (and %lbl%+79 true) :lblpos +79) (=> (= inline$CopyOrMoveValue$0$local@0 (GetLocal m@0 (+ local_counter 0))) inline$LibraCoin_mint_with_default_capability$0$anon0$1_correct))))
(let ((inline$LibraCoin_mint_with_default_capability$0$anon0_correct  (=> (! (and %lbl%+80 true) :lblpos +80) (=> (not abort_flag) (=> (and (and (and (is-Integer amount) (>= (|i#Integer| amount) 0)) (<= (|i#Integer| amount) MAX_U64)) (and (= local_counter@0 (+ local_counter 5)) (= m@0 (UpdateLocal m@@5 (+ local_counter 0) amount)))) inline$CopyOrMoveValue$0$Entry_correct)))))
(let ((inline$LibraCoin_mint_with_default_capability$0$Entry_correct  (=> (! (and %lbl%+81 true) :lblpos +81) (and (! (or %lbl%@82 (ExistsTxnSenderAccount m@@5 txn@@1)) :lblneg @82) (=> (ExistsTxnSenderAccount m@@5 txn@@1) inline$LibraCoin_mint_with_default_capability$0$anon0_correct)))))
(let ((anon0_correct  (=> (! (and %lbl%+83 true) :lblpos +83) (=> (ExistsTxnSenderAccount m@@5 txn@@1) inline$LibraCoin_mint_with_default_capability$0$Entry_correct))))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+84 true) :lblpos +84) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
